## Configuration

### Variables d'environnement

L'application utilise les variables d'environnement suivantes :

```
# Variable obligatoire
MISTRAL_API_KEY=votre-clé-api

# Variables avec valeurs par défaut (facultatives)
MISTRAL_ENDPOINT=https://ais-doc-ocr-dev.services.ai.azure.com/models
MISTRAL_MODEL=mistral-small-2503
```

### Configuration d'Entra ID

#### Pour l'application client (Blazor WebAssembly)
Fichier `wwwroot/appsettings.json` :
```json
{
  "AzureAd": {
    "ClientId": "votre-client-id",
    "Authority": "https://login.microsoftonline.com/votre-tenant-id",
    "ValidateAuthority": true
  },
  "ServerApi": {
    "BaseUrl": "url-de-votre-api",
    "Scopes": "api://votre-client-id/access_as_user"
  }
}
```

#### Pour l'API (Blazor Server)
Fichier `appsettings.json` :
```json
{
  "AzureAd": {
    "Instance": "https://login.microsoftonline.com/",
    "Domain": "votredomaine.onmicrosoft.com",
    "TenantId": "votre-tenant-id",
    "ClientId": "votre-client-id",
    "CallbackPath": "/signin-oidc",
    "Scopes": "access_as_user"
  }
}
```# MagicMistralOCR-Blazor

## Présentation
MagicMistralOCR-Blazor est une application intelligente développée en Blazor qui permet d'extraire des informations de vos documents en utilisant la puissance des modèles de vision-langage (VLM) via l'API Mistral dans Azure. Cette application est une adaptation du projet Python [MagicMistralOCR](https://github.com/VincentGourbin/MagicMistralOCR), disponible sous forme d'image Docker pour un déploiement simplifié.

## Fonctionnalités

* **Détection automatique de sections** : Analyse des documents pour identifier automatiquement les titres, champs et sections
* **Saisie manuelle de sections** : Ajout de sections personnalisées pour une extraction précise
* **Traitement par lots** : Analyse de plusieurs documents du même type en une seule fois
* **Format JSON structuré** : Résultats organisés et faciles à traiter pour l'intégration à d'autres systèmes
* **Mode expert** : Personnalisez les instructions d'extraction pour des cas d'utilisation spécifiques
* **Intégration Azure** : Utilisation de l'API Mistral déployée sur Azure pour le traitement des documents
* **Interface moderne et réactive** : Application web développée avec Blazor pour une expérience utilisateur optimale

## Prérequis

* .NET 8.0 ou supérieur
* Un compte Azure avec l'API Mistral configurée
* Un enregistrement d'application dans Microsoft Entra ID (Azure AD)
* Un navigateur web moderne

## Déploiement avec Docker

L'application est fournie sous forme d'image Docker, ce qui simplifie grandement son déploiement dans différents environnements.

### Prérequis pour Docker

* Docker installé sur votre machine ou serveur
* Accès à un registre Docker (optionnel)

### Utilisation de l'image Docker

1. Téléchargez l'image depuis le registre Docker (ou construisez-la localement) :
```bash
docker pull votre-registry/magicmistralocr-blazor:latest
```

2. Lancez un conteneur avec les variables d'environnement requises :
```bash
docker run -d \
  -p 8080:80 \
  -e MISTRAL_API_KEY=votre-clé-api \
  -e MISTRAL_ENDPOINT=https://ais-doc-ocr-dev.services.ai.azure.com/models \
  -e MISTRAL_MODEL=mistral-small-2503 \
  --name magicmistralocr \
  votre-registry/magicmistralocr-blazor:latest
```

3. Pour la configuration d'Entra ID, montez les fichiers de configuration :
```bash
docker run -d \
  -p 8080:80 \
  -e MISTRAL_API_KEY=votre-clé-api \
  -e MISTRAL_ENDPOINT=https://ais-doc-ocr-dev.services.ai.azure.com/models \
  -e MISTRAL_MODEL=mistral-small-2503 \
  -v /chemin/vers/appsettings.json:/app/appsettings.json \
  -v /chemin/vers/wwwroot/appsettings.json:/app/wwwroot/appsettings.json \
  --name magicmistralocr \
  votre-registry/magicmistralocr-blazor:latest
```

### Construction de l'image Docker

Si vous souhaitez construire l'image vous-même :

1. Clonez le dépôt :
```bash
git clone https://github.com/votre-utilisateur/MagicMistralOCR-Blazor.git
cd MagicMistralOCR-Blazor
```

2. Construisez l'image :
```bash
docker build -t magicmistralocr-blazor:latest .
```

3. Exécutez un conteneur avec l'image construite :
```bash
docker run -d -p 8080:80 -e MISTRAL_API_KEY=votre-clé-api --name magicmistralocr magicmistralocr-blazor:latest
```

### Déploiement dans Azure Container Instances

```bash
az container create \
  --resource-group votre-groupe-ressources \
  --name magicmistralocr \
  --image votre-registry/magicmistralocr-blazor:latest \
  --dns-name-label magicmistralocr \
  --ports 80 \
  --environment-variables \
    MISTRAL_API_KEY=votre-clé-api \
    MISTRAL_ENDPOINT=https://ais-doc-ocr-dev.services.ai.azure.com/models \
    MISTRAL_MODEL=mistral-small-2503
```

## Comment utiliser

### 1. Configurer l'API Azure Mistral

* L'application utilise par défaut les variables d'environnement définies lors de l'installation
* Si nécessaire, vous pouvez modifier ces paramètres dans l'interface de l'application :
  * Endpoint Mistral (par défaut : https://ais-doc-ocr-dev.services.ai.azure.com/models)
  * Modèle Mistral (par défaut : mistral-small-2503)
  * Clé API (requise pour le fonctionnement)

### 2. Configurer les sections

* Téléchargez un document modèle et cliquez sur "Magic Scan" pour détecter automatiquement les sections.
* OU ajoutez manuellement des sections en les saisissant (une par ligne) et en cliquant sur "Ajouter ces sections".
* Cochez les sections que vous souhaitez extraire.

### 3. Extraire les valeurs

* Téléchargez un ou plusieurs documents du même type.
* Pour une extraction avancée, utilisez le mode expert pour personnaliser les instructions d'extraction.
* Cliquez sur "Extraire les valeurs" pour obtenir les informations des sections sélectionnées.
* Les résultats sont disponibles au format JSON et peuvent être exportés.

## Architecture

L'application est structurée selon les principes d'une application Blazor avec :

* **Pages Razor** : Interface utilisateur réactive
* **Services** : Gestion des appels API et traitement des documents
* **Modèles** : Classes pour la manipulation des données
* **Composants** : Éléments d'interface réutilisables

### Authentification et sécurité

L'application utilise Microsoft Entra ID (anciennement Azure Active Directory) pour l'authentification :

* **Client Blazor WebAssembly** : Authentifie les utilisateurs et obtient des jetons d'accès pour l'API
* **API Blazor Server** : Valide les jetons et autorise l'accès aux ressources protégées
* **Scopes personnalisés** : Contrôle granulaire des autorisations via le scope `access_as_user`
* **Single Sign-On** : Intégration transparente avec d'autres applications d'entreprise

### Sécurité des API

* Les appels à l'API Mistral sur Azure sont sécurisés par clé API
* Communication client-serveur protégée par des jetons JWT
* Validation des autorisations basée sur les groupes et rôles Entra ID

## Différences avec la version Python originale

* Développement en C# avec Blazor au lieu de Python avec Gradio
* Interface utilisateur web complète et responsive
* Intégration native avec Azure pour l'API Mistral
* Gestion de l'authentification Azure intégrée
* Optimisations pour le déploiement dans un environnement d'entreprise

## Contribution

Les contributions sont les bienvenues ! N'hésitez pas à soumettre une pull request ou à ouvrir une issue pour discuter des améliorations possibles.

## Licence

Ce projet est sous licence MIT - voir le fichier LICENSE pour plus de détails.

## Remerciements

* [Vincent Gourbin](https://github.com/VincentGourbin) pour le projet original [MagicMistralOCR](https://github.com/VincentGourbin/MagicMistralOCR)
* L'équipe Mistral AI pour leur modèle de vision-langage